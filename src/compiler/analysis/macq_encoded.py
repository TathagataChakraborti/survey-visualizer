
from nnf import Var, And, Or
from nnf.kissat import solve

from encoding import gen_lookup, lookup, make_constraints, make_method_constraint

x1 = Var('Learning Parameters > Agent Features > Rationality > Causally Rational')
x2 = Var('Learning Parameters > Agent Features > Rationality > Optimally Rational')
x3 = Var('Learning Parameters > Model Features > Uncertainity  > Deterministic')
x4 = Var('Learning Parameters > Model Features > Uncertainity  > Non-deterministic')
x5 = Var('Learning Parameters > Model Features > Uncertainity  > Probabilistic')
x6 = Var('Learning Parameters > Model Features > Actions > Parameterized')
x7 = Var('Learning Parameters > Model Features > Actions > Typing')
x8 = Var('Learning Parameters > Model Features > Actions > Macros')
x9 = Var('Learning Parameters > Model Features > Actions > Cost')
x10 = Var('Learning Parameters > Model Features > Predicates > Parameterized')
x11 = Var('Learning Parameters > Model Features > Predicates > Parameters Typed')
x12 = Var('Learning Parameters > Data Features > Fluent Observability > Fully Observable')
x13 = Var('Learning Parameters > Data Features > Fluent Observability > Partially Observable')
x14 = Var('Learning Parameters > Data Features > Fluent Observability > Unobservable')
x15 = Var('Learning Parameters > Data Features > Fluent Observability > Noise')
x16 = Var('Learning Parameters > Data Features > Predicate Information > Parameterized')
x17 = Var('Learning Parameters > Data Features > Predicate Information > Typing')
x18 = Var('Learning Parameters > Data Features > Action Information > Parameterized')
x19 = Var('Learning Parameters > Data Features > Action Information > Typing')
x20 = Var('Learning Parameters > Data Features > Action Information > Noise')
x21 = Var('Learning Parameters > Data Features > Action Information > Action Labels Known')
x22 = Var('Learning Parameters > Data Features > Action Information > Parameters Known')
x23 = Var('Learning Parameters > Data Features > Action Information > Partial Preconditions')
x24 = Var('Learning Parameters > Data Features > Action Information > Partial Effects ')
x25 = Var('Learning Parameters > Data Features > Action Information > Cost')
x26 = Var('Learning Parameters > Data Features > State Information > Goal Access')
x27 = Var('Learning Parameters > Data Features > State Information > Init Access')
x28 = Var('Learning Parameters > Data Features > Trace > Full')
x29 = Var('Learning Parameters > Data Features > Trace > Partial')
x30 = Var('Learning Parameters > Data Features > Trace > Cost')

all_features = [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30]

m_live = make_method_constraint('001001000001000000001000011100', all_features)
m_prodigy = make_method_constraint('001000000101000100001011001100', all_features)
m_observer = make_method_constraint('001001100111000000001011000010', all_features)
m_expo = make_method_constraint('001001000101000101001111001100', all_features)
m_hanna = make_method_constraint('000011000101000101001111001100', all_features)
m_arms = make_method_constraint('001001100110100101001111011010', all_features)
m_luke = make_method_constraint('000011000101000101001111001100', all_features)
m_arms_j = make_method_constraint('001001100110100101001111011010', all_features)
m_hanna_luke = make_method_constraint('000011000101000101001111001100', all_features)
m_slaf = make_method_constraint('001001000100100100000000000100', all_features)
m_locm = make_method_constraint('001001100110010001001100000100', all_features)
m_opmaker2 = make_method_constraint('001001100110010111101111011100', all_features)
m_locm2 = make_method_constraint('001001100110010001001100000100', all_features)
m_mbp_plex = make_method_constraint('000000000000000000000000000000', all_features)
m_kira = make_method_constraint('001001000100101101001111000100', all_features)
m_aman = make_method_constraint('001001000101000101011100000100', all_features)
m_tramp = make_method_constraint('001001100110100111101111000100', all_features)
m_dup = make_method_constraint('000000000000010000001000000100', all_features)
m_nlocm = make_method_constraint('001001101110010001001100100101', all_features)
m_lop = make_method_constraint('011001100110010001001100000100', all_features)
m_stern = make_method_constraint('001000000001000000001000000100', all_features)
m_cpisa = make_method_constraint('001001100110010111101111011100', all_features)
m_louga = make_method_constraint('001001100110100101001111001010', all_features)
m_diego = make_method_constraint('001001000100100101001111011010', all_features)
m_icarus = make_method_constraint('001001000101000101001100011100', all_features)
m_fama = make_method_constraint('001001000100100101001111011010', all_features)
m_amdn = make_method_constraint('001001000100101101001100011100', all_features)
m_ccn = make_method_constraint('011000001001000000001000100000', all_features)
m_dam = make_method_constraint('001001100110100110001011011100', all_features)
m_blai = make_method_constraint('001001000100010000001000000000', all_features)
m_dup_max = make_method_constraint('000000000000010000001000000100', all_features)
m_aia = make_method_constraint('001001000101000101001111000100', all_features)
m_blai_extended = make_method_constraint('001001000100111000001000000000', all_features)
m_sam = make_method_constraint('001001000101000101001000000100', all_features)
m_rim = make_method_constraint('001001110110010111101111011100', all_features)
m_opmaker = make_method_constraint('001001100111000111101111011100', all_features)
m_olam = make_method_constraint('001001000101000101001111011100', all_features)
m_dbmps = make_method_constraint('001001110111000111101111011100', all_features)
m_SAMPlus = make_method_constraint('000011000101000101001000000100', all_features)
m_konidaris = make_method_constraint('001010001000101000001000101101', all_features)
m_andersen = make_method_constraint('000010000001001000001000101101', all_features)
m_konidaris_aaai = make_method_constraint('001000000001000000001000001100', all_features)
m_konidaris_ijcai = make_method_constraint('000010001001000000001000101101', all_features)

all_methods = [m_live, m_prodigy, m_observer, m_expo, m_hanna, m_arms, m_luke, m_arms_j, m_hanna_luke, m_slaf, m_locm, m_opmaker2, m_locm2, m_mbp_plex, m_kira, m_aman, m_tramp, m_dup, m_nlocm, m_lop, m_stern, m_cpisa, m_louga, m_diego, m_icarus, m_fama, m_amdn, m_ccn, m_dam, m_blai, m_dup_max, m_aia, m_blai_extended, m_sam, m_rim, m_opmaker, m_olam, m_dbmps, m_SAMPlus, m_konidaris, m_andersen, m_konidaris_aaai, m_konidaris_ijcai]

lookup_dict = gen_lookup(all_features)

custom_constraints = make_constraints('macq_constraints.txt', lookup_dict, all_features)
avoid_constraint = Or(all_methods).negate()

# Confirm all the methods satisfy the constraints
for m in all_methods:
    assert solve((m & custom_constraints).to_CNF())

T = (avoid_constraint & custom_constraints).to_CNF()
sol = solve(T)
print(','.join([str(int(sol[v.name])) for v in all_features]))
